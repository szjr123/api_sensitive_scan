// vulnerability.rs (仅保留敏感信息检测部分)
use regex::Regex;
use serde::{Serialize, Deserialize};

// 定义敏感信息结果结构体
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SensitiveInfoFinding {
    pub info_type: String,
    pub url: String,
    pub matched_content: String,
    pub position: usize,
    pub context: String,
    pub risk_score: u8,
}

pub struct SensitiveInfoDetector {
    patterns: Vec<(String, Regex)>,
}

impl SensitiveInfoDetector {
    pub fn new() -> Self {
        SensitiveInfoDetector {
            patterns: Self::create_patterns(),
        }
    }

    fn create_patterns() -> Vec<(String, Regex)> {
        vec![ 
            ("Email".to_string(), Regex::new(r"([a-zA-Z0-9][_.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9][-_.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,}").unwrap()),
            ("phone number".to_string(), Regex::new(r"(1[3-9][0-9]{9})").unwrap()),
            ("API Key".to_string(), Regex::new(r"(?i)(api[_-]?key|apikey)[a-zA-Z0-9_\-=]*").unwrap()),
            ("JWT Token".to_string(), Regex::new(r"eyJ[a-zA-Z0-9_-]{5,}\.eyJ[a-zA-Z0-9_-]{5,}\.S+[a-zA-Z0-9_-]*").unwrap()),
            ("Credit Card".to_string(), Regex::new(r"[1-9]\d{15,18}").unwrap()),
            ("Chinese ID".to_string(), Regex::new(r"[1-9]\d{5}(19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])\d{3}[\dXx]").unwrap()),
            ("Private Key".to_string(), Regex::new(r"-----BEGIN (?:RSA|DSA|EC|OPENSSH) PRIVATE KEY-----").unwrap()),
            ("database_credentials".to_string(),Regex::new(r"\b(mysql|postgres|mongodb)://[a-zA-Z0-9_]+:[^@\s]+@[a-zA-Z0-9.-]+:\d+/[a-zA-Z0-9_]+\b").unwrap()),
            ("internal_ip".to_string(),Regex::new(r"\b(10|192\.168|172\.(1[6-9]|2[0-9]|3[0-1]))\.\d{1,3}\.\d{1,3}\b").unwrap()),
            ("port_number".to_string(),Regex::new(r"\b:[0-9]{2,5}\b").unwrap()),
            ("sensitive_file_path".to_string(),Regex::new(r"(/|\\)(etc|home|users?|root)(/|\\)[^\s]+(\.(env|conf|config|key|pem))\b").unwrap()),
            ("stack_trace".to_string(),Regex::new(r"\bat\s+[a-zA-Z0-9_\.]+\.[a-zA-Z0-9_]+\([a-zA-Z0-9_\.]+:\d+\)").unwrap()),
            ("aws_key".to_string(),Regex::new(r"\b(AKIA|A3T|ABIA)[A-Z0-9]{16}\b").unwrap()),
            ("azure_sig".to_string(), Regex::new(r"\b(sigv[0-9])[a-zA-Z0-9_/+]{40,}").unwrap()),
            ("auth_header".to_string(),Regex::new(r"(Authorization|Proxy-Authorization):\s*(Bearer|Basic)\s+[a-zA-Z0-9._-]+").unwrap()),
            ("debug_info".to_string(),Regex::new(r"\b(DEBUG|TEST|ENV)\s*[:=]\s*(true|prod|secret)\b").unwrap())
        ]
    }

    pub fn detect(&self, url: &str, content: &str) -> Vec<SensitiveInfoFinding> {
        let mut findings = Vec::new();
        for (pattern_name, regex) in &self.patterns {
            for capture in regex.captures_iter(content) {
                if let Some(matched) = capture.get(0) {
                    let matched_text = matched.as_str();
                    let position = matched.start();
                    
                    // 提取上下文
                    let context_start = position.saturating_sub(30);
                    let context_end = (position + matched_text.len() + 30).min(content.len());
                    let context_snippet = &content[context_start..context_end];

                    // 风险评分
                    let score = match pattern_name.as_str() {
                        "API Key" | "AWS Key" | "AWS Secret" | "Private Key" => 10,
                        "JWT Token" | "DB Connection" => 8,
                        "Credit Card" | "Chinese ID" => 7,
                        "Email" | "IP Address" => 5,
                        _ => 3,
                    };

                    // 上下文分析，减少误报
                    if self.analyze_context(content, pattern_name, matched_text, position) {
                        findings.push(SensitiveInfoFinding {
                            info_type: pattern_name.clone(),
                            url: url.to_string(),
                            matched_content: matched_text.to_string(),
                            position,
                            context: context_snippet.to_string(),
                            risk_score: score,
                        });
                    }
                }
            }
        }
        findings
    }
    
    fn analyze_context(&self, content: &str, pattern_name: &str, matched_text: &str, position: usize) -> bool {
        // 获取匹配前后的上下文
        let context_start = position.saturating_sub(50);
        let context_end = (position + matched_text.len() + 50).min(content.len());
        let context = &content[context_start..context_end];
        
        // 基于上下文判断是否为误报
        match pattern_name {
            "IP Address" => {
                // 排除明显的公共IP或本地IP
                if matched_text == "127.0.0.1" || matched_text == "0.0.0.0" || 
                   matched_text.starts_with("192.168.") || matched_text.starts_with("10.") {
                    return false;
                }
                true
            },
            "Email" => {
                // 排除公开联系邮箱
                if context.contains("contact") || context.contains("support") || 
                   context.contains("info@") || context.contains("public") {
                    return false;
                }
                true
            },
            _ => true
        }
    }
}
